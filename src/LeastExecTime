import com.google.common.collect.Lists;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.util.CollectionUtils;

import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Random;
import java.util.stream.Collectors;

public class LeastExecTime {
    /**
    * 计算机有两个cpu，假设有一个执行任务为一个二叉树，每一个结点的数值为该任务执行需要的时间，其子节点为依赖任务。
    * 计算最短执行时间。
    * 该算法目前有个小问题：同层叶子节点执行顺序的确定
    */
    public static void main(String[] args) {
        Node tree = Node.builder()
                .time(10)
                .left(init())
                .right(init())
                .build();
        List<Info> infos = getNodeInfo(Lists.newArrayList(), tree, 1);
        int totalTime = 0;
        CurrentTask first = null;
        CurrentTask second = null;
        while (!(Objects.isNull(first) && Objects.isNull(second) && Objects.isNull(getnext(infos)))) {

            if (Objects.nonNull(first) && Objects.nonNull(second)) {
                if (first.getTimeLeft() <= second.getTimeLeft()) {
                    second.setTimeLeft(second.getTimeLeft() - first.getTimeLeft());
                    totalTime += first.getTimeLeft();
                    finish(infos, first.getNode());
                    first = null;
                } else {
                    first.setTimeLeft(first.getTimeLeft() - second.getTimeLeft());
                    totalTime += second.getTimeLeft();
                    finish(infos, second.getNode());
                    second = null;
                }
                continue;
            }

            Info next;
            if (Objects.isNull(first)) {
                next = getnext(infos);
                if (Objects.isNull(next)) {
                    totalTime += second.getTimeLeft();
                    finish(infos, second.getNode());
                    second = null;
                } else {
                    first = CurrentTask.builder()
                            .timeLeft(next.getTime())
                            .node(next.getNode())
                            .build();
                    next.setExec(true);
                }
                continue;
            }

            if (Objects.isNull(second)) {
                next = getnext(infos);
                if (Objects.isNull(next)) {
                    totalTime += first.getTimeLeft();
                    finish(infos, first.getNode());
                    first = null;
                } else {
                    second = CurrentTask.builder()
                            .timeLeft(next.getTime())
                            .node(next.getNode())
                            .build();
                    next.setExec(true);
                }
            }


        }
        System.out.println("total:" + totalTime);
        return;

    }

    public static Node init() {
        int in = new Random().nextInt(10);
        if (count >= 3) {
            return null;
        }
        count++;
        Node node = new Node();
        node.setTime(in);
        node.setLeft(init());
        node.setRight(init());
        count--;
        return node;
    }

    public static void finish(List<Info> infos, Node node) {
        infos.forEach(info -> {
            if (!CollectionUtils.isEmpty(info.getLeftDependency()) && info.getLeftDependency().contains(node)) {
                info.getLeftDependency().remove(node);
                if (CollectionUtils.isEmpty(info.getLeftDependency())) {
                    info.setCanStart(true);
                }
            }
        });
    }

    public static Info getnext(List<Info> infos) {
        List<Info> infoList = infos.stream().filter(info -> info.canStart && !info.exec).sorted(Comparator.comparingInt(Info::getLevel)).collect(Collectors.toList());
        return CollectionUtils.isEmpty(infoList) ? null : infoList.get(infoList.size()-1);
    }

    public static List<Info> getNodeInfo(List<Info> list, Node tree, int level) {
        Node left = tree.getLeft();
        Node right = tree.getRight();
        Info info = new Info();
        info.setTime(tree.getTime());
        info.setNode(tree);
        info.setLevel(level);
        if (Objects.isNull(left) && Objects.isNull(right)) {
            info.setCanStart(true);
            list.add(info);
            return list;
        }
        info.setLeftDependency(Lists.newArrayList());
        if (Objects.nonNull(left)) {
            info.getLeftDependency().add(left);
            getNodeInfo(list, left, level+1);
        }
        if (Objects.nonNull(right)) {
            info.getLeftDependency().add(right);
            getNodeInfo(list, right, level+1);
        }

        list.add(info);
        return list;
    }



    @Getter
    @Setter
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class Node {
        int time;
        Node left;
        Node right;


    }

    @Getter
    @Setter
    public static class Info {
        int time;
        int level;
        Node node;
        boolean exec;
        boolean canStart;
        List<Node> leftDependency;
    }

    @Getter
    @Setter
    @Builder
    @NoArgsConstructor
    @AllArgsConstructor
    public static class CurrentTask {
        int timeLeft;
        Node node;
    }

}
